<#@ template language="C#" #><#@ import namespace="System.Collections.Generic" #>
<#
    var fields = new[]
    {
        new
        {
            Name = "SubIFDs",
            Type = "TiffStreamOffset",
            TypeName = "IFD8",
            IsFirstString = false,
            SizeLimit = -1,
            ReturnType = "TiffValueCollection<TiffStreamOffset>",
            ResultHandling = "result"
        },
        new
        {
            Name = "ClipPath",
            Type = "byte",
            TypeName = "Byte",
            IsFirstString = false,
            SizeLimit = -1,
            ReturnType = "byte[]",
            ResultHandling = "result.GetOrCreateArray()"
        },
        new
        {
            Name = "XClipPathUnits",
            Type = "int",
            TypeName = "SLong",
            IsFirstString = false,
            SizeLimit = 1,
            ReturnType = "int?",
            ResultHandling = "result.IsEmpty ? default(int?) : result.GetFirstOrDefault()"
        },
        new
        {
            Name = "YClipPathUnits",
            Type = "int",
            TypeName = "SLong",
            IsFirstString = false,
            SizeLimit = 1,
            ReturnType = "int?",
            ResultHandling = "result.IsEmpty ? default(int?) : result.GetFirstOrDefault()"
        },
        new
        {
            Name = "Indexed",
            Type = "ushort",
            TypeName = "Short",
            IsFirstString = false,
            SizeLimit = 1,
            ReturnType = "ushort",
            ResultHandling = "result.GetFirstOrDefault()"
        }
    };

#>
using System.Threading;
using System.Threading.Tasks;

namespace TiffLibrary
{
    public static partial class TiffTagReaderExtensions
    {
    <#
    foreach (var field in fields)
    {
    #>

        #region <#= field.Name #>

        /// <summary>
        /// Read the values of <see cref="TiffTag.<#= field.Name #>"/>.
        /// </summary>
        /// <param name="tagReader">The tag reader to use.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> that fires if the user want to stop the current task.</param>
        /// <returns>A <see cref="ValueTask{TiffValueCollection}"/> that completes when the value of the tag is read and return the read values.</returns>
        public static ValueTask<<#= field.ReturnType #>> Read<#= field.Name #>Async(this TiffTagReader tagReader, CancellationToken cancellationToken = default)
        {
<# if (field.TypeName == "ASCII" && field.IsFirstString) { #>
            ValueTask<string?> valueTask = tagReader.ReadASCIIFieldFirstStringAsync(TiffTag.<#= field.Name #>, sizeLimit: <#= field.SizeLimit #>, cancellationToken);
            if (valueTask.IsCompletedSuccessfully)
            {
                return new ValueTask<string?>(valueTask.GetAwaiter().GetResult());
            }

            return new ValueTask<string?>(TransformValueTaskAsync(valueTask));

            static async Task<string?> TransformValueTaskAsync(ValueTask<string?> valueTask)
            {
                return await valueTask.ConfigureAwait(false);
            }
<# } else {#>
<# if (field.TypeName == "ASCII") { #>
            ValueTask<TiffValueCollection<<#= field.Type #>>> valueTask = tagReader.Read<#= field.TypeName #>FieldAsync(TiffTag.<#= field.Name #>, cancellationToken);
<# } else {#>
            ValueTask<TiffValueCollection<<#= field.Type #>>> valueTask = tagReader.Read<#= field.TypeName #>FieldAsync(TiffTag.<#= field.Name #>, sizeLimit: <#= field.SizeLimit #>, cancellationToken);
<# } #>
            if (valueTask.IsCompletedSuccessfully)
            {
                TiffValueCollection<<#= field.Type #>> result = valueTask.GetAwaiter().GetResult();
                return new ValueTask<<#= field.ReturnType #>>(<#= field.ResultHandling #>);
            }

            return new ValueTask<<#= field.ReturnType #>>(TransformValueTaskAsync(valueTask));

            static async Task<<#= field.ReturnType #>> TransformValueTaskAsync(ValueTask<TiffValueCollection<<#= field.Type #>>> valueTask)
            {
                TiffValueCollection<<#= field.Type #>> result = await valueTask.ConfigureAwait(false);
                return <#= field.ResultHandling #>;
            }
<# } #>
        }

        /// <summary>
        /// Read the values of <see cref="TiffTag.<#= field.Name #>"/>.
        /// </summary>
        /// <param name="tagReader">The tag reader to use.</param>
        /// <returns>The values read.</returns>
        public static <#= field.ReturnType #> Read<#= field.Name #>(this TiffTagReader tagReader)
        {
<# if (field.TypeName == "ASCII" && field.IsFirstString) { #>
            return tagReader.ReadASCIIFieldFirstString(TiffTag.<#= field.Name #>, sizeLimit: <#= field.SizeLimit #>);
<# } else {#>
<# if (field.TypeName == "ASCII") { #>
            TiffValueCollection<<#= field.Type #>> result = tagReader.Read<#= field.TypeName #>Field(TiffTag.<#= field.Name #>);
<# } else {#>
            TiffValueCollection<<#= field.Type #>> result = tagReader.Read<#= field.TypeName #>Field(TiffTag.<#= field.Name #>, sizeLimit: <#= field.SizeLimit #>);
<# } #>
            return <#= field.ResultHandling #>;
<# } #>
        }

        #endregion
    <#
    }
    #>

    }
}
